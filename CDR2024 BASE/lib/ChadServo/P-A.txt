code
BIANCHI Pierre-Alex
​
LOOIJ Dylan​

#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
#include <AccelStepper.h>
#include <UniBoardDef.h>
#include <SPI.h>

#define MILLIEU 50

//angle du servos pour la hauteur en z.
#define PZB 0
#define PZH 50
#define PZHM 100 // max 100
#define PZM 60 //millieu

//angle de rotation du système de pince
#define PRG 92 // max 92
#define PRD 10 //min 20



// angle ouverture et fermeture de la pince 
#define PSD 10
#define PSG 90
#define POG 50
#define POD 50

#define BARILLET_MOVE 400

#define DELAY 500 //250 AVEC CODE BLOQUANT
#define DELAY_P 550 //550 AVEC CODE BLOQUANT

unsigned short int etape = 0;

unsigned short int nbr_pot_charge = 0;
boolean actionFinis = true;
boolean action = true;

/*
      MOTEUR PIN 1 : réglage hauteur,      bas ~150 haut ~450
      MOTEUR PIN 2 : réglage pince droite, droite ~450 gauche ~150
      MOTEUR PIN 3 : réglage pince gauche, droite ~450 gauche ~150
      MOTEUR PIN 4 : réglage angle,        droite ~150 gauche ~450
  */

Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x40, Wire);
AccelStepper BARIL(AccelStepper::DRIVER, PIN::Steppers::STEP3, PIN::Steppers::DIR3);

unsigned long temps_debut_servo;
int etape_actuelle_servo = 0;



unsigned long temps_debut_servo;
unsigned char etape_actuelle_servo = 0;


// Permet de positionner le baril sur un des 4 slots de plante
void baril_move(int pourcentage) {
    pourcentage = constrain(pourcentage, 0, 100);
    pourcentage = map(pourcentage, 0, 100, 0, 200);
    //BARIL.moveTo(pourcentage);
}

// Permet de faire monter sur l'axe Z un servo
void servo_z(int idServo, int pourcentage) {
    pourcentage = constrain(pourcentage, 0, 100);
    pourcentage = map(pourcentage, 0, 100, 210, 456);
    //pwm.setPWM(idServo, 0, pourcentage);
}

// Permet de faire tourner vers la gauche un servo
void servo_xy(int idServo, int pourcentage) {
    pourcentage = constrain(pourcentage, 0, 100);
    pourcentage = map(pourcentage, 0, 100, 100, 450);
    //pwm.setPWM(idServo, 0, pourcentage);
}



// Scan en ping les adresses possibles afin de trouver des périphs en I2C
void scan_i2c() {
    unsigned char error, address;
    int nDevices = 0;

    Serial.println("Scan...");

    for (address = 1; address < 127; address++) {
        Wire.beginTransmission(address);
        error = Wire.endTransmission();

        if (error == 0) {
            Serial.print("I2C found, address: 0x");

            if (address < 16) {
                Serial.print("0");
            }

            Serial.println(address, HEX);
            nDevices++;
        } else if (error == 4) {
            Serial.print("Unknown error at address: 0x");

            if (address < 16) {
                Serial.print("0");
            }

            Serial.println(address, HEX);
        }
    }

    if (nDevices == 0) {
        Serial.println("No I2C found");
    } else {
        Serial.print("nDevices: ");
        Serial.println(nDevices);
    }
}

// Permet de positionner le baril sur un des 4 slots de plante
void baril_move(int pourcentage) {
    pourcentage = constrain(pourcentage, 0, 100);
    pourcentage = map(pourcentage, 0, 100, 0, 200);
    BARIL.moveTo(pourcentage);
}

// Permet de faire monter sur l'axe Z un servo
void servo_z(int idServo, int pourcentage) {
    pourcentage = constrain(pourcentage, 0, 100);
    pourcentage = map(pourcentage, 0, 100, 210, 500);
    pwm.setPWM(idServo, 0, pourcentage);
}

// Permet de faire tourner vers la gauche un servo
void servo_xy(int idServo, int pourcentage) {
    pourcentage = constrain(pourcentage, 0, 100);
    pourcentage = map(pourcentage, 0, 100, 100, 450);
    pwm.setPWM(idServo, 0, pourcentage);
}

// Permet de saisir une fleur et de la mettre dans un pot sur le bariller
void mettre_fleur_pot() {
    switch (etape_actuelle_servo) {
        case 0:
        /*
            servo_xy(SERVO_MOVE_PINCE, 63);
            servo_xy(SERVO_PINCE_DROITE, 40);
            servo_xy(SERVO_PINCE_GAUCHE, 75);
            */
            temps_debut_servo = millis();
            etape_actuelle_servo = 1;
            baril_move(75);
            break;

        case 1:
            if (millis() - temps_debut_servo >= 1000) {
                //servo_z(SERVO_HAUTEUR, 0);
                temps_debut_servo = millis();
                etape_actuelle_servo = 2;
            }
            break;

        case 2:
            if (millis() - temps_debut_servo >= 1000) {
                //servo_xy(SERVO_PINCE_DROITE, 15);
                //servo_xy(SERVO_PINCE_GAUCHE, 100);
                temps_debut_servo = millis();
                etape_actuelle_servo = 3;
            }
            break;

        case 3:
            if (millis() - temps_debut_servo >= 1000) {
                //servo_z(SERVO_HAUTEUR, 100);
                temps_debut_servo = millis();
                etape_actuelle_servo = 4;
                baril_move(25);
            }
            break;

        case 4:
            if (millis() - temps_debut_servo >= 1000) {
                //servo_xy(SERVO_MOVE_PINCE, 3);
                temps_debut_servo = millis();
                etape_actuelle_servo = 5;
            }
            break;

        case 5:
            if (millis() - temps_debut_servo >= 1000) {
                //servo_xy(SERVO_PINCE_DROITE, 35);
                //servo_xy(SERVO_PINCE_GAUCHE, 65);
                temps_debut_servo = millis();
                etape_actuelle_servo = 6;
            }
            break;

        case 6:
            if (millis() - temps_debut_servo >= 1000) {
                //servo_xy(SERVO_MOVE_PINCE, 63);
                etape_actuelle_servo = 0;
            }
            break;
        default:
            break;
    }
}

void reglage(){
    servo_z(SERVO_HAUTEUR, PZM);
    servo_xy(SERVO_MOVE_PINCE, PRD);
    servo_xy(SERVO_PINCE_DROITE, 0);
    servo_xy(SERVO_PINCE_GAUCHE, 100);
    baril_move(100);
}

void serrer_pince(boolean true_false){
    if(true_false){
        servo_xy(SERVO_PINCE_DROITE,PSD);
        servo_xy(SERVO_PINCE_GAUCHE,PSG);
    }else{
        servo_xy(SERVO_PINCE_DROITE,MILLIEU);
        servo_xy(SERVO_PINCE_GAUCHE,MILLIEU);
    }
}

// void ChargeBarriletPlantes(){
//     servo_xy(SERVO_MOVE_PINCE, PRG);
//     serrer_pince(false);
//     delay(DELAY_P);
//     servo_z(SERVO_HAUTEUR, PZB);
//     delay(DELAY);
//     serrer_pince(true);
//     delay(DELAY);
//     servo_z(SERVO_HAUTEUR, PZHM);
//     delay(DELAY);
//     servo_xy(SERVO_MOVE_PINCE, PRD);
//     delay(DELAY_P);
//     servo_z(SERVO_HAUTEUR, PZH);
//     delay(DELAY);
//     serrer_pince(false);
//     delay(DELAY);
//     servo_z(SERVO_HAUTEUR, PZHM);
//     delay(DELAY);
// }

boolean ChargeBarriletPlantes(){
    if(actionFinis){
        temps_debut_servo = millis();
        actionFinis = false;
    }
    switch(etape){
        case 0:
            servo_xy(SERVO_MOVE_PINCE, PRG);
            serrer_pince(false);
            if(millis() - temps_debut_servo >= DELAY_P){
                etape++;
                actionFinis = true;
            }
            return false;
            break;
            
        case 1:
            servo_z(SERVO_HAUTEUR, PZB);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
            }
            return true;
            break;
            
        case 2:
            serrer_pince(true);
            if(millis() - temps_debut_servo >= 500){
                etape++;
                actionFinis = true;
            }
            return false;
            break;
            
        case 3:
            servo_z(SERVO_HAUTEUR, PZHM);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
            }
            return false;
            break;
            
        case 4:
            servo_xy(SERVO_MOVE_PINCE, PRD);
            if(millis() - temps_debut_servo >= DELAY_P){
                etape++;
                actionFinis = true;
            }
            return false;
            break;
            
        case 5:
            servo_z(SERVO_HAUTEUR, PZH);
            if(millis() - temps_debut_servo >= 500){
                etape++;
                actionFinis = true;
            }
            return false;
            break;
            
        case 6:
            serrer_pince(false);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
            }
            return false;
            break;
            
        case 7:
            servo_z(SERVO_HAUTEUR, PZHM);
            if(millis() - temps_debut_servo >= DELAY){
                etape = 0;
                nbr_pot_charge++;
                actionFinis = true;
                BARIL.move(BARILLET_MOVE);
                if(nbr_pot_charge == 4){
                    action = false;
                }
            }
            return false;
            break;
            
        default:
            return false;
            break;
    }
    return false;
}

void ChargeBarriletPot(){
    //servo_xy(SERVO_MOVE_PINCE, MILLIEU);
    //delay(1000);
    servo_xy(SERVO_MOVE_PINCE, PRG);
    serrer_pince(false);
    delay(800);
    servo_z(SERVO_HAUTEUR, PZB);
    //BARIL.move(BARILLET_MOVE);
    delay(800);
    serrer_pince(true);
    delay(1000);
    servo_z(SERVO_HAUTEUR, PZH);
    delay(800);
    servo_xy(SERVO_MOVE_PINCE, PRD);
    delay(1000);
    servo_xy(SERVO_PINCE_DROITE,90);
    servo_xy(SERVO_PINCE_GAUCHE,MILLIEU);
    servo_z(SERVO_HAUTEUR, PZHM);
    delay(800);
    
}

// void viderBarrilet(){
//     servo_z(SERVO_HAUTEUR, PZHM);
//     delay(DELAY);
//     servo_xy(SERVO_MOVE_PINCE, PRD);
//     delay(DELAY_P);
//     serrer_pince(false);
//     delay(DELAY);
//     servo_z(SERVO_HAUTEUR, PZH);
//     delay(DELAY);
//     serrer_pince(true);
//     delay(DELAY);
//     servo_z(SERVO_HAUTEUR, PZHM);
//     delay(DELAY);
//     servo_xy(SERVO_MOVE_PINCE, PRG);
//     delay(DELAY_P);
//     servo_z(SERVO_HAUTEUR, PZB);
//     // BARIL.move(BARILLET_MOVE);
//     delay(DELAY);
//     serrer_pince(false);
//     delay(DELAY);
    
// }

boolean viderBarrilet(){
    if(actionFinis){
        temps_debut_servo = millis();
        actionFinis = false;
    }
    switch (etape){
        case 0 : 
            servo_z(SERVO_HAUTEUR, PZHM);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
                return true;
            }
            return false;
            break;
            

        case 1 :
            servo_xy(SERVO_MOVE_PINCE, PRD);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
                return true;
            }
            return false;
            break;
            

        case 2 :
            serrer_pince(false);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
                return true;
            }
            return false;
            break;
           

        case 3 :
            servo_z(SERVO_HAUTEUR, PZH);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
                return true;
            }
            return false;
            break;

        case 4 :
            serrer_pince(true);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
                return true;
            }
            return false;
            break;
            

        case 5 :
            servo_z(SERVO_HAUTEUR, PZHM);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
                return true;
            }
            return false;
            break;

        case 6 :
            servo_xy(SERVO_MOVE_PINCE, PRG);
            if(millis() - temps_debut_servo >= DELAY){
                etape ++;
                actionFinis = true;
                return true;
            }
            return false;
            break;

        case 7 : 
            servo_z(SERVO_HAUTEUR, PZB);
            if(millis() - temps_debut_servo >= DELAY){
                etape++;
                actionFinis = true;
                return true;
            }
            return false;
            break;

        case 8 : 
            serrer_pince(false);
            if(millis() - temps_debut_servo >= DELAY){
                etape=0;
                nbr_pot_charge--;
                actionFinis = true;
                BARIL.move(BARILLET_MOVE);
                if(nbr_pot_charge == 0){
                    action = true;
                }
                return true;
            }
            
        default:
            return false;
            break;
    }
    return false;

}

void Motor(void *pvParameters){
    do{
        BARIL.run();
    }while(1);

}


void setup(){
// bind the RPLIDAR driver to the arduino hardware serial
 
  Wire.begin(5, 4);
  scan_i2c();


  // Servos
  pwm.begin();
  pwm.setOscillatorFrequency(25000000); // https://github.com/adafruit/Adafruit-PWM-Servo-Driver-Library/blob/master/examples/servo/servo.ino#L49
  pwm.setPWMFreq(SERVO_FREQ_HZ);

  xTaskCreatePinnedToCore(Motor, "Motor", 10000, NULL, 0, NULL, 0);


  delay(2000);

  BARIL.setAcceleration(2000.0);
  BARIL.setMaxSpeed(4000.0);
  
  //BARIL.setSpeed(50);
 
  delay(1000);
  //Robot.Enable();

  // Robot.Disable();

}


void loop() {
    int i = 0;

    // for(i=0;i<4;i++){
    //     ChargeBarriletPlantes();
    //     BARIL.move(BARILLET_MOVE);
        
    // }
    // delay(1000);
    // for(i=0;i<4;i++){
    //     viderBarrilet();
    //     BARIL.move(BARILLET_MOVE);
    // }
    // delay(1000);

    if(action)
        ChargeBarriletPlantes();
    else{
        viderBarrilet();
    }



}
